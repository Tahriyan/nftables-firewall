#!/usr/sbin/nft -f

flush ruleset

# The inet family automatically covers ip and ip6
table inet filter {

    # Track how many packets match these rules (for debugging/statistics)
    counter drop_invalid{}
    counter accept_rel{}
    counter cnt_ssh{}
    counter cnt_ssh6{}

    # Define trusted IPs allowed to connect via SSH (IPv4)
    set allowed_ips {
        type ipv4_addr;
        flags interval;
        auto-merge;
        elements = { 192.168.80.0/24 };  # Example: local subnet
    }

    # Define trusted IPs allowed to connect via SSH (IPv6)
    set allowed_ips6 {
        type ipv6_addr;
        flags interval;
        auto-merge;
        elements = { fd15:4ba5:5a2b:1008::/64 };  # Example: IPv6 ULA subnet
    }

    # Temporary denylist for IPv4 addresses that trigger brute-force detection
    set denylist {
        type ipv4_addr;
        flags dynamic, timeout;
        timeout 10m;  # Block IP for 10 minutes
    }

    # Temporary denylist for IPv6 addresses
    set denylist6 {
        type ipv6_addr;
        flags dynamic, timeout;
        timeout 10m;
    }

    # Protection against brute-force login attempts (IPv4)
    chain BRUTE {
        ip protocol tcp ct state new, untracked limit rate over 3/minute add @denylist { ip saddr }
        accept
    }

    # Protection against brute-force login attempts (IPv6)
    chain BRUTE6 {
        ip6 nexthdr tcp ct state new, untracked limit rate over 3/minute add @denylist6 { ip6 saddr }
        accept
    }

    # Chain to allow essential ICMPv6 for IPv6 networking
    chain icmpv6_common {
        icmpv6 type {
            echo-request,
            echo-reply,
            destination-unreachable,
            packet-too-big,
            time-exceeded,
            parameter-problem,
            nd-router-advert,
            nd-neighbor-solicit,
            nd-neighbor-advert
        } accept
    }

    # Logs and drops packets that reach this point (not accepted elsewhere)
    chain log_drops {
        limit rate 10/second
        log prefix "nftables drop: " flags all
        drop
    }

    chain incoming {
        type filter hook input priority 0; policy drop;

        ct state invalid counter name drop_invalid drop
        ct state { established, related } counter name accept_rel accept

        # Loopback protection (drop spoofed loopback traffic)
        iif != lo ip daddr 127.0.0.1/8 counter drop
        iif != lo ip6 daddr ::1/128 counter drop
        ip6 daddr fe80::/10 iif != lo drop

        # Accept traffic from loopback interface
        iif lo accept

        # Drop traffic from denylist
        ip saddr @denylist drop
        ip6 saddr @denylist6 drop

        # ICMP rules
        jump icmpv6_common
        icmp type echo-request limit rate 1/second accept

        # SSH protection - allow only from trusted IPs
        ct state new ip saddr @allowed_ips tcp dport 22 counter name cnt_ssh jump BRUTE
        ct state new ip6 saddr @allowed_ips6 tcp dport 22 counter name cnt_ssh6 jump BRUTE6

        # All other traffic: log and drop
        jump log_drops
    }

    chain outcoming {
        type filter hook output priority filter; policy accept;
        ct state vmap { established: accept, related: accept, invalid: drop }
    }

    chain FORWARD {
        type filter hook forward priority filter; policy drop;
        ct state vmap { established: accept, related: accept, invalid: drop }
    }
}